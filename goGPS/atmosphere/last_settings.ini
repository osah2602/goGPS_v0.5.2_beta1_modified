#--------------------------------------------------------------------------------
[PROJECT]
#--------------------------------------------------------------------------------
# Name of the project
prj_name = "Default DD project"
# Home of the project
prj_home = "..\..\data\project\default_DD"

#--------------------------------------------------------------------------------
[DEPRECATE]
#--------------------------------------------------------------------------------
# Deprecate ini - path - it contains some legacy setting (now imported in the new settings system)
# [ WW ] if not empty the system will import its parameter overriding the one written in here
input_file_ini_path = ""

#--------------------------------------------------------------------------------
[RECEIVER_FILES]
#--------------------------------------------------------------------------------
# "sss_" parameters define the session of observation, they are used to substitute special keywords in file names
# Working session - first data of observation to consider (yyyy-mm-dd <HH:MM:SS>)
# mainly used to detect the name of the file to process
sss_date_start = "2019-09-01 00:00:00"
# Working session - last data of observation to consider (yyyy-mm-dd <HH:MM:SS>)
sss_date_stop = "2019-09-01 23:55:00"
# Id character sequence to be use for the session $(S) special keyword (e.g. "01233456789ABCabc")
sss_id_list = "0"
# First session id (char of sss_id_list)
sss_id_start = "0"
# Last session id (char of sss_id_list)
sss_id_stop = "0"

# Special Keywords that can be used in file names:
#  - ${WWWW} 4 char GPS week
#  - ${WWWWD} 4+1 char GPS week + day of the week
#  - ${D} 1 char day of the week
#  - ${HH} 2 char GPS hour
#  - ${6H} 2 char GPS hour (00, 06, 12, 18)
#  - ${YY} 2 char GPS year
#  - ${YYYY} 4 char GPS year
#  - ${DOY} 3 char GPS day of the year
#  - ${S} 1 char session

# Directory containing the data (static)
obs_dir = "RINEX"
# File name of the receivers (can contain special keywords)
obs_name = ["LISAGA1_5m.19o" "LISAGTAD1_5m.19o"]
# Array of observations type (0: Target, 1: Master, 2: SEID reference)
obs_type = [0 1]

# Directory of PCO - PCV antex (ATX) files
atx_dir = "..\..\antenna\ATX"
# PCO - PCV antex (ATX) file
atx_name = "igs14_1941.atx"

#--------------------------------------------------------------------------------
[GEOMETRY]
#--------------------------------------------------------------------------------
# When using multiple receivers it is possible to set the relative position of each
# receiver w.r.t. a local reference frame
# Positions are expressed in a XYZ RF as an array "xyz_ant_${NN}" where $NN is
# the (target) receiver number (as ordered in obs_name) starting from 01
xyz_ant_01 = [0 0 0]
# Indicate the "baricenter" of the structure -> evaluation point
xyz_ev_point = [0 0 0]

#--------------------------------------------------------------------------------
[COMPUTATION_CENTER]
#--------------------------------------------------------------------------------
# List of the computeation center to be used for ephemeris retrival
# Every product is searched locally, when not found is downloaded
# When the file is not found, the system fall back on the next available

# Preferred list of web archives,
# accepted values: "cddis" "custom"
preferred_archive = ["cddis" "igscb" "custom"]
# Preferred source for GPS only solution, 
# accepted values: "igs" "cod" "jpl" "esa" "emx" "gbm"
preferred_gps = ["igs" "emx" "gbm"]
# Preferred source for GPS/GLONASS only solution,
# accepted values: "igs" "cod" "esa" "emx" "gbm"
preferred_glo = ["igs" "emx" "gbm"]
# Preferred source for Multiconstellation solution,
# accepted values: "gbm"
preferred_mxd = ["gbm"]
# Preferred ephemeris type, valid only for source "igs",
# accepted values: "final" "rapid" "ultra" "broadcast"
preferred_eph = ["final" "rapid" "ultra" "broadcast"]
# Preferred Earth rotation parameters type, rapid are not always available,
# accepted values: "final" "rapid" "ultra"
preferred_erp = ["final" "rapid" "ultra"]
# Preferred clock types, valid but for "igs" glonass,
# accepted values: "clk_05s" "clk_30s" "clk"
preferred_clk = ["clk_30s" "clk"]

# A custom center/product can also be used
# (all the fields are strings)
custom_addr = "cddis.gsfc.nasa.gov\"
custom_port = "21"
custom_path = "pub\gps\products\${WWWW}\"
# The "variable" part of the path should be in the name, e.g. ${WWWW}/igs${WWWWD}.sp3
custom_name_eph = "igs${WWWWD}.sp3"
custom_name_clk = "igs${WWWWD}.clk_30s"
custom_name_erp = "igs${WWWWD}.erp"

#--------------------------------------------------------------------------------
[INPUT_SATELLITE]
#--------------------------------------------------------------------------------
# Directory of Ephemeris files
eph_dir = "RINEX"
# Name of Ephemeris files - special keywords can be used
# If not found, goGPS will try to download them following COMPUTATION_CENTER section
eph_name = "LISAGA1.19n"

# Directory of clock offset files
clk_dir = "RINEX"
# If not found, goGPS will try to download them following COMPUTATION_CENTER section
# Name of clock offset files - special keywords can be used
clk_name = "yamatogawa_rover.nav"

# Directory of CRX files (containing satellite problems)
crx_dir = "..\..\satellite\CRX"

# Directory of DCB files (Differential Code Biases)
dcb_dir = "..\..\satellite\DCB"

# Directory of EMS files (EGNOS Message Server).
ems_dir = "..\..\satellite\SBAS\EMS"

#--------------------------------------------------------------------------------
[INPUT_STATIONS]
#--------------------------------------------------------------------------------
# Directory of coordinates files
crd_dir = "..\..\station\CRD"
# Name of coordinates (CRD) file
crd_name = ""
# Directory of meteorological data
met_dir = "..\..\station\MET"
# Meteorological file
met_name = ""
# Directory of ocean loading files
ocean_dir = "..\..\station\ocean"
# Name of ocean loading file
ocean_name = ""

#--------------------------------------------------------------------------------
[INPUT_REFERENCE]
#--------------------------------------------------------------------------------
# Directory of Earth rotation/orientation parameters (ERP) files
erp_dir = "..\..\reference\ERP"
# If not found, goGPS will try to download them following COMPUTATION_CENTER section
# Name of ERP files - special keywords can be used
erp_name = "igu${WWWWD}_${6H}.erp"
# Directory of Geoid files
geoid_dir = "..\..\reference\geoid"
# Filename in Geoid dir containing the map of ondulation of the geoid
geoid_name = "geoid_EGM2008_05.mat"
# Directory of DTM data
dtm_dir = "..\..\reference\dtm"
# File containing a graph of path constraints
ref_graph_file = ""

#--------------------------------------------------------------------------------
[INPUT_UI]
#--------------------------------------------------------------------------------
# Directory of images for UI
img_dir = "..\..\img"
# Path to the image of the logo 64x64 px

#--------------------------------------------------------------------------------
[OUTPUT]
#--------------------------------------------------------------------------------

# Base dir that is going to store the ouput data files
out_dir = "out"
# Prefix ("name") to add to the output (can contain special keywords / subfolders)
out_prefix = "yamatogawa"
# Current run number, when empty it will be automatically updated to avoid overwrite
# the run_counter value is added as a 3 digit number to the output file name (after the prefix)
# WARNING: when set it will be used, and can cause overwrites
run_counter = 

# Flag to export positions results
flag_out_position = 1
# Flag to export the used settings as ini file
flag_out_settings = 1
# Flag to write the PDF report
flag_out_pdf_report = 1
# Flag to export PDF troposphere results (when available)
flag_out_pdf_tropo = 0
# Flag to write the PDF of the code residuals
flag_out_pdf_code_res = 1
# Flag to write the PDF of the phase residuals
flag_out_pdf_ph_res = 1
# Flag to write the PDF of the estimated dt
flag_out_pdf_dt = 1
# Flag to export the object that coputed the block solution (if computed)
flag_out_block_obj = 0
# Flag to export the KML file (when expected)
flag_out_kml = 1
# Flag to export the NMEA file (when expected)
flag_out_nmea = 0


#--------------------------------------------------------------------------------
[RECEIVERS]
#--------------------------------------------------------------------------------
# Default STD of code observations [m]
std_code = 3
# Default STD of phase observations [m]
std_phase = 0.03
# Default STD of iono-free phase observations [m
std_phase_if = 0.009
# Default STD of a priori receiver clock
sigma0_clock = 4.47e-09
# Default STD of receiver clock
sigma0_r_clock = 31

# Read master position from RINEX (0/1)
flag_rinex_mpos = 1
# Default Master position (this values are read when not specified elsewhere)
mpos_XYZ = [0 0 0]

#--------------------------------------------------------------------------------
[DATA_SELECTION]
#--------------------------------------------------------------------------------
# Constallations for the processing:
# GPS satellite system
GPS_is_active = 1
# Frequencies to be used when this constellation is active
GPS_L1 = 1
GPS_L2 = 0
GPS_L5 = 0

# GLONASS satellite system
GLO_is_active = 0
# Frequencies to be used when this constellation is active
GLO_G1 = 0
GLO_G2 = 0
GLO_G3 = 0

# Galileo satellite system
GAL_is_active = 0
# Frequencies to be used when this constellation is active
GAL_E1 = 0
GAL_E5a = 0
GAL_E5b = 0
GAL_E5 = 0
GAL_E6 = 0

# QZSS satellite system
QZS_is_active = 0
# Frequencies to be used when this constellation is active
QZS_J1 = 0
QZS_J2 = 0
QZS_J5 = 0
QZS_J6 = 0

# BeiDou satellite system
BDS_is_active = 0
# Frequencies to be used when this constellation is active
BDS_B1 = 0
BDS_B2 = 0
BDS_B3 = 0

# IRNSS satellite system
IRN_is_active = 0
# Frequencies to be used when this constellation is active
IRN_L5 = 0
IRN_S = 0

# SBAS satellite system
SBS_is_active = 0
# Frequencies to be used when this constellation is active
SBS_L1 = 0
SBS_L5 = 0

# Processing using a minimum rate of [s]:
p_rate = 900
# Minimum number of satellite per epoch
min_n_sat = 2
# Cut-off [degrees]
cut_off = 10
# Signal-to-noise ratio threshold [dB]
snr_thr = 0
# Enable ocean tides modeling (0/1)
flag_ocean = 0
# Minimum length an arc (a satellite to be used must be seen for a number of consecutive epochs equal or greater than this value)
min_arc = 12

#--------------------------------------------------------------------------------
[PRE_PROCESSING]
#--------------------------------------------------------------------------------
# Enable pre-processing (0/1)
flag_pre_pro = 1
# Cycle slip threshold [cycles]
cs_thr_pre_pro = 1

#--------------------------------------------------------------------------------
[OUTLIER_DETECTION]
#--------------------------------------------------------------------------------
# Enable outlier detection (0/1)
flag_outlier = 1
# Apply OLOO for outlier detection (0/1)
flag_outlier_OLOO = 0
# Threshold on code LS estimation error [m]
pp_spp_thr = 4
# Threshold on maximum residual of code obs [m]
pp_max_code_err_thr = 30
# Threshold on maximum residual of phase obs [m]
pp_max_phase_err_thr = 0.05

#--------------------------------------------------------------------------------
[PROCESSING]
#--------------------------------------------------------------------------------
# Processing using mode:
p_mode = 4
#  24: Real Time Navigation (Kalman Filter on Code and Phase Double Differences (with/without a constraint)
#  21: Real Time Rover Monitor
#  22: Real Time Master Monitor
#  23: Real Time Master + Rover Monitor
#  01: Post Proc Least Squares on Code Stand Alone
#  03: Post Proc Least Squares on Code and Phase Stand Alone
#  05: Post Proc Least Squares on Code and Phase for Velocity estimation
#  11: Post Proc Least Squares on Code Double Differences
#  13: Post Proc Least Squares on Code and Phase Double Differences with LAMBDA
#  16: Post Proc Least Squares on Code and Phase Double Differences, Multiple Receivers
#  17: Post Proc Least Squares on Code Stand Alone, Multiple Receivers
#  30: Post Proc Block solution on Code and Phase Double Differences, Static
#  02: Post Proc Kalman Filter on Code Stand Alone
#  12: Post Proc Kalman Filter on Code Double Differences
#  04: Post Proc Kalman Filter on Code and Phase Stand Alone (PPP)
#  14: Post Proc Kalman Filter on Code and Phase Double Differences
#  15: Post Proc Kalman Filter on Code and Phase Double Differences, Multiple Receivers (SEID - only rinex writing)
#  18: SEID followed by PPP (Kalman Filter on Code and Phase Stand Alone (PPP)) it is both stand alone and DD

# Compute tropospheric indicators (e.g. ZTD):
flag_tropo = 1
flag_tropo_gradient = 0
# Variometric step [s] for velocity estimation
variometric_step = 1
# Processing using weighting mode:
w_mode = 1
#  0: same weight for all the observations
#  1: weight based on satellite elevation (sin)
#  2: weight based on satellite elevation (exp)
#  3: weight based on signal-to-noise ratio
#  4: weight based on combined elevation and signal-to-noise ratio

# Weight function parameters (when based on SNR): a / 0 / 1 / A
w_snr = [30 10 10 30]
# Cycle slip threshold (processing) [cycles]
cs_thr = 1e+30
# Enable usage of iono-free combination in PPP (0/1)
flag_ionofree = 1
# Constrain the solution using a reference path
constrain = 0
# Enable / Disable stop go stop mode option (0/1)
stop_go_stop = 0

# Solution rate to be exported [seconds] (goBlock only), the static mean solution is always computed
s_rate = 3600

#--------------------------------------------------------------------------------
[AMBIGUITY]
#--------------------------------------------------------------------------------
# Use integer ambiguity resolution (0/1)
flag_iar = 0

# Ambiguity restart mode
iar_restart_mode = 1
#  0: Observed code - phase difference
#  1: Kalman-predicted code - phase difference
#  2: Least squares adjustment
# Ambiguity detection mode
iar_mode = 5
#  0: ILS method with numeration in search (LAMBDA2)
#  1: ILS method with shrinking ellipsoid during search (LAMBDA3)
#  2: ILS method with numeration in search (LAMBDA3)
#  3: integer rounding method (LAMBDA3)
#  4: integer bootstrapping method (LAMBDA3)
#  5: Partial Ambiguity Resolution (PAR) (LAMBDA3)

# User defined fixed failure rate (methods 1,2) / user defined minimum success rate (for method 5)
iar_p0 = 0.001
# STD of a priori ambiguity combinations [cycles]
sigma0_N = 31
# User defined threshold for ratio test
iar_mu = 0.5
# Automatic determination of mu (0/1)
flag_iar_auto_mu = 1
# Use default value for P0 (0/1)
flag_iar_default_p0 = 1
# Use Doppler-predicted phase range for detecting cycle slips (0/1)
flag_doppler = 0

#--------------------------------------------------------------------------------
[GO_BLOCK]
#--------------------------------------------------------------------------------
# Try to correct cycle slips / discontinuities in the observations and increase spike variance
# WARNING: risky operation, do it with consciousness, check the results against disabled pre-cleaning
#          this feature can be used when the phase residuals show unresolved anbiguities
block_pre_cleaning = 0
# After a first solution iterate # times to stabilize the solution introducing a correction (when needed) in the observations of N (integer) cycles
block_post_cleaning_loops = 4
# Compute ambiguities and the high rate solution as a unique system (true) / compute independent goBlock high rate solution (false)
block_seamless_hr = 1
# When there is an interruption in all the phase observations suppose a cycle slip on all the satellite -> split the LS system
# This could improve the results when processing daily datasets, when processing at high rate with no seamless mode it is best to turn this feature off.
block_full_slip_split = 0
# Try to remove the arcs that are making the covariance matrix of the ambiguities unstable
# Often, the computed positions are good wether or not the covariance matrix is stable
# Under particular conditions forcing the stabilization can remove most or all the arcs making the solution worse
block_force_stabilization = 0
# Compute the solution considering one arc per satellite
# It uses the fixed solution from LAMBDA to correct cycle slips
block_one_arc = 0

#--------------------------------------------------------------------------------
[KALMAN_FILTER]
#--------------------------------------------------------------------------------
# Order of the KF
kf_mode = 1
# When capture/monitor modes are in use
#  0: constant
#  1: variable
# When post processing is in use:
#  0: static
#  1: constant velocity
#  2: constant acceleration
#  3: variable (stop-go-stop)

# STD of initial state [m]
sigma0_k_pos = 1
# STD of ENU variation [m] / [m/s] / [m/s^2]
std_k_ENU = [0.5 0.5 0.1]
# STD of 3D modulus variation [m] / [m/s] / [m/s^2]
std_k_vel_mod = 1

# Use forward - backward mode for Kalman filter processing (-1 / 0 / 1)
#  -1 Backward -> Forward
#   0 Forward
#   1 Forward -> Backward
# WARNING: experimental - enabled for static DD code and phase
flag_kf_fb = 0
# Tell the processor to not re-initialize Kalman filter at the end of 1 session processing (0/1)
flag_seamless_proc = 0

#--------------------------------------------------------------------------------
[ATMOSPHERE]
#--------------------------------------------------------------------------------
# Standard deviation of a priori tropospheric delay (default = 0.200)
sigma0_tropo = 0.1
# Standard deviation of tropospheric delay [m/h] (default = 0.040)
std_tropo = 0.00045644
# Standard deviation of a priori tropospheric gradient (default = 1.000)
sigma0_tropo_gradient = 1
# Standard deviation of tropospheric gradient [m/h] (default = 0.010)
std_tropo_gradient = 0.01
# Ionospheric model
iono_model = 2
#  0: no model
#  1: Geckle and Feen model
#  2: Klobuchar model
#  3: SBAS grid


#--------------------------------------------------------------------------------
[DTM]
#--------------------------------------------------------------------------------
# Use DTM (0/1)
flag_dtm = 0
# STD of DEM model [m]
std_dtm = 1e+30
# Elevation of the antenna above ground [m]
antenna_h = 0

#--------------------------------------------------------------------------------
[UI]
#--------------------------------------------------------------------------------
# Plot during processing (0/1)
plot_proc = 0
# Plot reference during processing (0/1)
plot_ref_path = 0
# Plot sky plot during processing (0/1)
plot_skyplot_snr = 1
# Plot error_ellipse (0/1)
plot_err_ellipse = 0
# Plot ambiguities (0/1)
plot_ambiguities = 0
# Plot master station (0/1)
plot_master = 0
# Plot on google earth (0/1)
plot_google_earth = 0

#--------------------------------------------------------------------------------
[CAPTURE]
#--------------------------------------------------------------------------------
# Number of receivers for capturing data
c_n_receivers = 1
# Capture rate
c_rate = 1

# Protocol for receiver 1
c_prtc_01 = 1
#  1: UBX (u-blox)
#  2: iTalk (Fastrax)
#  3: SkyTraq
#  4: BINR (NVS)

# COM address for receiver 1
c_com_addr_01 = "NA"

#--------------------------------------------------------------------------------
[NTRIP]
#--------------------------------------------------------------------------------
# Use NTRIP protocol (0/1)
flag_ntrip = 1
# Here the NTRIP server parameters will follow (ip_addr, port, mountpoint, user, password, approximate_position):
ip_addr = "127.0.0.1"
port = "2101"
mountpoint = "/"
username = "user"
password = ""
# Approximate position [degrees / degrees / m]:
ntrip_lat = 0
ntrip_lon = 0
ntrip_h = 0

